name: Deploy PackCode to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggers

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: packcode

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install server dependencies
      run: npm ci
      
    - name: Install client dependencies
      run: |
        cd client
        npm ci
        
    - name: Run server tests
      run: npm test
      
    - name: Run client tests
      run: |
        cd client
        npm test -- --coverage --ci
        
    - name: Run E2E tests
      run: |
        cd client
        npx playwright install --with-deps
        npm run test:e2e
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          client/coverage/
          client/test-results/
          client/playwright-report/

  build:
    runs-on: ubuntu-latest
    needs: test
    name: Build Application
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci --production
        cd client && npm ci
        
    - name: Build client
      run: |
        cd client
        npm run build
        
    - name: Create deployment package
      run: |
        mkdir -p build
        cp -r server build/
        cp package*.json build/
        cp -r client/build build/client/
        
        # Create deployment info
        cat > build/deployment-info.json << EOF
        {
          "timestamp": "$(date -u +%Y%m%dT%H%M%SZ)",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "workflow_run": "${{ github.run_number }}",
          "actor": "${{ github.actor }}"
        }
        EOF
        
    - name: Create tarball
      run: |
        cd build
        tar -czf ../packcode-${{ github.sha }}.tar.gz .
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: packcode-build
        path: packcode-${{ github.sha }}.tar.gz
        retention-days: 30

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    name: Deploy to AWS
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: packcode-build
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Find deployment bucket
      id: bucket
      run: |
        BUCKET_NAME=$(aws s3api list-buckets --query "Buckets[?contains(Name, '${{ env.PROJECT_NAME }}-deployments')].Name" --output text | head -n1)
        echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
        
    - name: Upload to S3
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        aws s3 cp packcode-${{ github.sha }}.tar.gz s3://${{ steps.bucket.outputs.bucket_name }}/releases/packcode-${{ github.sha }}.tar.gz
        aws s3 cp packcode-${{ github.sha }}.tar.gz s3://${{ steps.bucket.outputs.bucket_name }}/latest.tar.gz
        
    - name: Deploy to instances
      run: |
        # Get Auto Scaling Group instances
        INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names ${{ env.PROJECT_NAME }}-asg \
          --query 'AutoScalingGroups[0].Instances[?LifecycleState==`InService`].InstanceId' \
          --output text)
        
        if [ -z "$INSTANCE_IDS" ]; then
          echo "No running instances found"
          exit 1
        fi
        
        echo "Deploying to instances: $INSTANCE_IDS"
        
        # Create deployment command
        DEPLOYMENT_COMMAND="
        cd /var/www/packcode
        sudo -u packcode aws s3 cp s3://${{ steps.bucket.outputs.bucket_name }}/latest.tar.gz /tmp/packcode.tar.gz
        sudo -u packcode tar -xzf /tmp/packcode.tar.gz -C /var/www/packcode --overwrite
        sudo -u packcode npm ci --production
        sudo -u packcode pm2 restart packcode || sudo -u packcode pm2 start server/index.js --name packcode
        sudo systemctl reload nginx
        rm -f /tmp/packcode.tar.gz
        echo 'Deployment completed successfully'
        "
        
        # Deploy to each instance
        for INSTANCE_ID in $INSTANCE_IDS; do
          echo "Deploying to instance $INSTANCE_ID"
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters commands="$DEPLOYMENT_COMMAND" \
            --query 'Command.CommandId' \
            --output text)
          
          # Wait for command to complete
          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID
          
          # Check status
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID \
            --query 'Status' \
            --output text)
          
          if [ "$STATUS" != "Success" ]; then
            echo "Deployment failed on instance $INSTANCE_ID"
            aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id $INSTANCE_ID \
              --query 'StandardErrorContent' \
              --output text
            exit 1
          fi
          
          echo "Instance $INSTANCE_ID deployed successfully"
        done
        
    - name: Health check
      run: |
        # Get load balancer DNS
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names ${{ env.PROJECT_NAME }}-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text 2>/dev/null || echo "")
        
        if [ ! -z "$ALB_DNS" ]; then
          echo "Testing load balancer health at $ALB_DNS"
          sleep 15  # Wait for instances to register
          
          # Test health endpoint
          for i in {1..10}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$ALB_DNS/api/health || echo "000")
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "Health check passed (HTTP $HTTP_STATUS)"
              break
            else
              echo "Health check attempt $i/10 (HTTP $HTTP_STATUS)"
              if [ $i -eq 10 ]; then
                echo "Health check failed after 10 attempts"
                exit 1
              fi
              sleep 10
            fi
          done
        fi
        
    - name: Update deployment tracking
      run: |
        # Store deployment info in Systems Manager Parameter Store
        aws ssm put-parameter \
          --name "/${{ env.PROJECT_NAME }}/last-deployment" \
          --value "{\"timestamp\":\"$(date -u +%Y%m%dT%H%M%SZ)\",\"commit\":\"${{ github.sha }}\",\"branch\":\"${{ github.ref_name }}\",\"workflow_run\":\"${{ github.run_number }}\"}" \
          --type String \
          --overwrite
          
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Workflow: ${{ github.run_number }}"
        
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    name: Send Notifications
    
    steps:
    - name: Notify Slack on success
      if: needs.deploy.result == 'success'
      run: |
        if [ ! -z "${{ secrets.SLACK_WEBHOOK }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"üöÄ PackCode deployed successfully to AWS\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}\nWorkflow: ${{ github.run_number }}"}' \
            ${{ secrets.SLACK_WEBHOOK }}
        fi
        
    - name: Notify Slack on failure
      if: needs.deploy.result == 'failure'
      run: |
        if [ ! -z "${{ secrets.SLACK_WEBHOOK }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚ùå PackCode deployment failed\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}\nWorkflow: ${{ github.run_number }}\nView logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
            ${{ secrets.SLACK_WEBHOOK }}
        fi