name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'

jobs:
  # Environment validation
  validate-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate environment configuration
        run: npm run validate:env
        env:
          NODE_ENV: production
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

  # Backend tests
  backend-tests:
    runs-on: ubuntu-latest
    needs: validate-environment
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for MongoDB
        run: |
          timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          MONGODB_TEST_URI: mongodb://localhost:27017/appmarketplace_test
          JWT_SECRET: test-jwt-secret
          SESSION_SECRET: test-session-secret

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          MONGODB_TEST_URI: mongodb://localhost:27017/appmarketplace_test
          JWT_SECRET: test-jwt-secret
          SESSION_SECRET: test-session-secret

      - name: Generate test coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          MONGODB_TEST_URI: mongodb://localhost:27017/appmarketplace_test
          JWT_SECRET: test-jwt-secret
          SESSION_SECRET: test-session-secret

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend tests
  frontend-tests:
    runs-on: ubuntu-latest
    needs: validate-environment

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install backend dependencies
        run: npm ci

      - name: Install frontend dependencies
        run: cd client && npm ci --legacy-peer-deps

      - name: Run frontend linting
        run: npm run lint

      - name: Run frontend tests
        run: npm run test:client:coverage
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./client/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # End-to-end tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci --legacy-peer-deps

      - name: Install Playwright browsers
        run: cd client && npx playwright install --with-deps

      - name: Seed test database
        run: npm run db:seed
        env:
          NODE_ENV: development
          MONGODB_URI: mongodb://localhost:27017/appmarketplace_e2e
          JWT_SECRET: test-jwt-secret
          SESSION_SECRET: test-session-secret

      - name: Start application
        run: |
          npm run dev &
          npx wait-on http://localhost:3000 http://localhost:3001 --timeout 60000
        env:
          NODE_ENV: development
          MONGODB_URI: mongodb://localhost:27017/appmarketplace_e2e
          JWT_SECRET: test-jwt-secret
          SESSION_SECRET: test-session-secret
          GITHUB_CLIENT_ID: test-github-id
          GITHUB_CLIENT_SECRET: test-github-secret

      - name: Run Playwright tests
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: client/playwright-report/
          retention-days: 30

  # Build and deployment check
  build-check:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci --legacy-peer-deps

      - name: Build application
        run: npm run build:production
        env:
          NODE_ENV: production
          GENERATE_SOURCEMAP: false

      - name: Check build artifacts
        run: |
          ls -la public/
          test -f public/index.html
          test -d public/static

  # Security audit
  security-audit:
    runs-on: ubuntu-latest
    needs: validate-environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci --legacy-peer-deps

      - name: Run security audit (backend)
        run: npm audit --audit-level=moderate

      - name: Run security audit (frontend)
        run: cd client && npm audit --audit-level=moderate

  # Deployment (production only)
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, build-check, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Health check
        run: |
          sleep 30
          curl -f https://www.pack-code.com/api/health || exit 1